Codewars solutions:

//Maximum length difference (6kyu)

//You are given two arrays a1 and a2 of strings. Each string is composed with letters from a to z. Let x be any string in the first array and y be any string in the second array.

//Find max(abs(length(x) âˆ’ length(y)))

//If a1 and/or a2 are empty return -1 in each language except in Haskell (F#) where you will return Nothing (None).

object Kata extends App {

  def mxdiflg(a1: List[String], a2: List[String]): Int = {
    if (a1.isEmpty | a2.isEmpty){
      -1
    } else {
    a1.map( a=> {
      a2.map( b => {
        val calc = (a.length - b.length).abs
        calc
      })
    }).flatten.max
  }
  }
}

//Who likes it? (6kyu)

//You probably know the "like" system from Facebook and other pages. People can "like" blog posts, pictures or other items. We want to create the text that should be displayed next to such an item.

//Implement the function which takes an array containing the names of people that like an item. 

def likes(names: Array[String]): String = {
    if (names.isEmpty){
      "no one likes this"
    } else if (names.length == 1){
      println(names.head)
      val head = names.head
      s"$head likes this"
    } else if (names.length == 2 ){
      val first = names.head
      val second = names.last
      s"$first and $second like this"
    } else if(names.length == 3){
      val start = names.head
      val middle = names(1)
      val finish = names.last
      s"$start, $middle and $finish like this"
    } else {
      val firstly = names.head
      val secondly = names(1)
      val length = names.length - 2
      s"$firstly, $secondly and $length others like this"
    }
}

//Multiples of 3 or 5 (6kyu)

//If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

//Finish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in. Additionally, if the number is negative, return 0 (for languages that do have them).

//Note: If the number is a multiple of both 3 and 5, only count it once.

object MultiplesOf3Or5 extends App {   
    def solution(number: Int): Long = {
      (1 to number-1).map(a => {
        if (a % 3 == 0 | a % 5 == 0 ){
          a.toLong
        } else {
          0
        }
      }).sum
    }
    solution(100000)
}

// Given an array of integers, find the one that appears an odd number of times.(6kyu) 

//There will always be only one integer that appears an odd number of times.

//Examples
//[7] should return 7, because it occurs 1 time (which is odd).
//[0] should return 0, because it occurs 1 time (which is odd).
//[1,1,2] should return 2, because it occurs 1 time (which is odd).
//[0,1,0,1,0] should return 0, because it occurs 3 times (which is odd).
//[1,2,2,3,3,3,4,3,3,3,2,2,1] should return 4, because it appears 1 time (which is odd).

object FindTheOddInt {
  def findOdd(xs: Seq[Int]): Int = {
    xs.groupBy(number => number)
    .map(grouped => (grouped._2.length, grouped._1))
    .filter(filters => (filters._1 != 0 && filters._1 % 2 != 0))
    .values.toList.head
  }
  findOdd(List(20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5))
}


// (6kyu) Digital root is the recursive sum of all the digits in a number.

//Given n, take the sum of the digits of n. 
//If that value has more than one digit, continue reducing in this way until a single-digit number is produced. 
//The input will be a non-negative integer.

object SumOfDigits extends App {

  def digitalRoot(n: Int): Int = {
    val res = n.toString.split("").map(a => a.toInt).sum
    if (res.toString.split("").length > 1){
      digitalRoot(res)
    } else res
  }
  digitalRoot(493193)
}

//Write a function that takes an integer as input, and returns the number of bits that are equal to one in the binary representation of that number. You can guarantee that input is non-negative.

//Example: The binary representation of 1234 is 10011010010, so the function should return 5 in this case

object Kata {

  def countBits(n: Int): Int = n.toBinaryString.count(_ == '1')
}

(6KYU) //The goal of this exercise is to convert a string to a new string where each character in the new string is "(" if that character appears only once in the original string, or ")" if that character appears more than once in the original string. Ignore capitalization when determining if a character is a duplicate.

def duplicateEncode(word: String): String = {
    word.toLowerCase.map( a => if ( word.toLowerCase.count(_ == a) 
    >1) { ")"
      
    } else "("
    
    ).mkString("")
    
  
  } 

(6kyu)You are given an array (which will have a length of at least 3, but could be very large) containing integers. The array is either entirely comprised of odd integers or entirely comprised of even integers except for a single integer N. Write a method that takes the array as an argument and returns this "outlier" N.

object Parity {

  def findOutlier(integers: List[Int]): Int = {
    val odd = integers.filter( a=> a % 2 != 0)
    val even = integers.filter( a=> a % 2 == 0)
    if (odd.length == 1){
      odd.head
    } else even.head
    
  }
}

(6kyu) Counting duplicates - Write a function that will return the count of distinct case-insensitive alphabetic characters and numeric digits that occur more than once in the input string. The input string can be assumed to contain only alphabets (both uppercase and lowercase) and numeric digits.

object Dups extends App  {
  def duplicateCount(str: String): Int = {
    str.toUpperCase.split("").groupBy(identity).toMap.map( a=> 
    if (a._2.length > 1){
      1 
    } else 0
    ).sum
  }
}
(6KYU) - Write a function, persistence, that takes in a positive parameter num and returns its multiplicative persistence, which is the number of times you must multiply the digits in num until you reach a single digit.

 object Multiplication {
  
  def persistence(n: Int, count: Int = 0): Int = {
    
    val b = n
      .toString
      .split("")
      .map(a => {
      a.toInt
      }).reduce(_*_)
    
    if (b
        .toString
        .split("")
        .length == 1){
      if (n
          .toString
          .split("")
          .length == 1){
        count
      } else {
        count + 1
      }
    } else { 
      persistence(b, count + 1)
    }
  }
}

(6KYU) Your task is to sort a given string. Each word in the string will contain a single number. This number is the position the word should have in the result.

Note: Numbers can be from 1 to 9. So 1 will be the first word (not 0).

If the input string is empty, return an empty string. The words in the input String will only contain valid consecutive numbers.

object Text extends App {

  def order(str: String): String = {
    val splitted = str.split(" ").toList
    val indexed = str.split("[\\D+]")
    .filter(_.nonEmpty)
    .toList
    .zip(splitted)
    .sorted.toList
    indexed.map(a => a._2).mkString(" ")

  }
}

